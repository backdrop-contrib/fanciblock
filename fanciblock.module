<?php

/**
 * @file
 * Fanciblock module creates configurable feature boxes with images or icons.
 *
 * Maintainer: Wilmoth Andy Shillingford
 * Inspired by Iconbox module by Himanshu Shakhar (developmenticon)
 */

/**
 *  Implementation of hook_config_info()
 */
function fanciblock_config_info() {
  $prefixes['fanciblock.settings'] = array(
    'label' => t('Fanciblock settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 *  Implementation of hook_cron()
 *  
 *  Deletes unused fanciblock settings. Fanciblocks are added via Layout builder
 *  and their settings are saved in hook_block_save to fanciblock.settings.json.
 *  
 *  When a block is removed from Layout builder, there is no way to tell this
 *  happened immediately. This may change; see https://github.com/backdrop/backdrop-issues/issues/767.
 *  
 *  Until then this checks for removed layout blocks to delete their settings on 
 *  cron run.
 *  
 */
function fanciblock_cron() {
  // Find all Fanciblocks stored in Layout settings and save to an array.
  $all_layouts = layout_get_all_configs('layout');
  $layouts = array();
  foreach ($all_layouts as $layout_name => $active_layouts) {
    foreach ($active_layouts['content'] as $uuid => $block) {
      if ($block['data']['module'] == 'fanciblock') {
        $layouts[] = $block['data']['settings']['block_settings']['fanciblock_name'];
      }
    }
  }
  // Then check if the Fanciblocks in our Fanciblock config are actually in a 
  // layout by checking if its ID is in the $layouts array we just built.
  $settings = config('fanciblock.settings');
  $data = $settings->get();
  foreach ($data as $key => $setting) {
    // If the Fanciblock setting is no longer in a Layout, delete it.
    if (is_null($setting) || (is_array($setting) && !in_array($key, $layouts))) {
      unset($data[$key]);
    }
  }
  $settings->setData($data);
  $settings->save();
}


/**
 * Implements hook_permission().
 */
function fanciblock_permission() {
  $perms = array(
    'administer fanciblock' => array(
      'title' => t('Administer Icon Box'),
      'restrict access' => TRUE,
    ),
  );
  return $perms;
}

/**
 * Implements hook_library_info().
 */
function fanciblock_library_info() {
  // Library One.
  $libraries['fontawesome'] = array(
    'title' => 'Font Awesome',
    'website' => 'http://fortawesome.github.com/Font-Awesome/',
    'version' => '1.2',
    'css' => array(
      backdrop_get_path('module', 'fanciblock') . '/fontawesome/css/font-awesome.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function fanciblock_menu() {
  //List blocks.
  $items['admin/structure/fanciblocks'] = array(
    'title' => 'Fanciblocks',
    'page callback' => 'fanciblock_overview_page',
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.admin.inc',
  );
  $items['admin/structure/fanciblocks/list'] = array(
    'title' => 'List fanciblocks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'fanciblock.admin.inc',
  );
  //Add block.
  $items['admin/structure/fanciblocks/add-block/fanciicon'] = array(
    'title' => 'Add icon block',
    'page callback' => 'fanciblock_box_add_block',
    'page arguments' => array(4),
    'access arguments' => array('administer fanciblock'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'fanciblock.admin.inc',
  );
  //Add block.
  $items['admin/structure/fanciblocks/add-block/fanciblock'] = array(
    'title' => 'Add image block',
    'page callback' => 'fanciblock_box_add_block',
    'page arguments' => array(4),
    'access arguments' => array('administer fanciblock'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'fanciblock.admin.inc',
  );
  // Edit block.
  $items['admin/structure/fanciblocks/%fanciblock/edit'] = array(
    'title' => 'List Box',
    'title callback' => 'fanciblock_title_callback',
    'title arguments' => array(3),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_block_edit_form', 3),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.admin.inc',
  );
  // Delete block.
  $items['admin/structure/fanciblocks/%fanciblock/delete'] = array(
    'title' => 'List Box',
    'title callback' => 'fanciblock_title_callback',
    'title arguments' => array(3),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_block_delete_confirm', 3),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.admin.inc',
  );
  // List boxes.
  $items['admin/structure/fanciblocks/%fanciblock'] = array(
    'title' => 'List Box',
    'title callback' => 'fanciblock_title_callback',
    'title arguments' => array(3),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_overview_form', 3),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  // Add box.
  $items['admin/structure/fanciblocks/%fanciblock/add-box'] = array(
    'title' => 'Add box',
    'page callback' => 'fanciblock_box_add_box',
    'page arguments' => array(3),
    'access arguments' => array('administer fanciblock'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'fanciblock.box.admin.inc',
  );
  // Edit box.
  $items['admin/structure/fanciblocks/%fanciblock/%/edit'] = array(
    'title' => 'Edit box',
    'title callback' => 'fanciblock_title_callback',
    'title arguments' => array(3),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_edit_box', 3, 4, 5),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  // Delete box.
  $items['admin/structure/fanciblocks/%fanciblock/%/delete'] = array(
    'title' => 'Delete box',
    'title callback' => 'fanciblock_title_callback',
    'title arguments' => array(3),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('fanciblock_box_delete_box',3, 4, 5),
    'access arguments' => array('administer fanciblock'),
    'file' => 'fanciblock.box.admin.inc',
  );
  // THis is just a fake link. It will show up in fanciblock contextual menus
  // so that we can identify them. THis is because all blocks have their 
  // $root_path set as 'admin/structure/menu/manage/%' because of Layout, and
  // that makes it hard to figure which block belongs to which module.
  $items['fanciblock/stub/%'] = array(
    'title' => 'Block information',
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => '/',
    'menu_name' => 'fanciblock',
    'access callback' => TRUE,
  );
  $items['fanciblock/preview/%fanciblock'] = array(
    'title' => 'Block preview',
    'type' => MENU_CALLBACK,
    'page callback' => 'fanciblock_preview',
    'page arguments' => array(2),
    'access arguments' => array('administer fanciblock'),
  );
  return $items;
}

/**
 * Title callback.
 */
function fanciblock_title_callback($fanciblock) {
  return $fanciblock['settings']['fanciblock_title'];
}

/**
 * Loads a Fanciblock.
 */
function fanciblock_load_all() {
  $result = config_get('fanciblock.settings');
  $fanciblocks = array();
  foreach ($result as $info) {
    if (is_array($info)) {
      $fanciblocks[$info['settings']['fanciblock_name']] = $info;
    }
  }

  return $fanciblocks;
}

/**
 * Loads a Fanciblock.
 */
function fanciblock_load($fanciblock_name = NULL) {
  $fanciblocks = fanciblock_load_all();

  return isset($fanciblocks[$fanciblock_name]) ? $fanciblocks[$fanciblock_name] : NULL;
}

/**
 *  Implements hook_menu_contextual_links_alter
 *  
 *  This adds links to edit individual fanciblock boxes tot the main fanciblock
 *  contextual links menu. It uses the stub contextual link menu item to find
 *  fanciblocks, then deletes the stub.
 */
function fanciblock_menu_contextual_links_alter(&$links, $router_item, $root_path) {
 if ($root_path == 'fanciblock/stub/%') {
    $fanciblock = $router_item['map'][2];
    $config = fanciblock_get_settings($fanciblock);
    if ($config) {
      $config = $config['boxes'];
      foreach ($config as $box) {
        $links['fb' . $box['boxid']] = array(
          'title' => 'Edit ' . $box['box_title'],
          'href' => 'admin/structure/fanciblocks/' . $box['fanciblock_name'] . '/' . $box['boxid'] . '/edit',
          'localized_options' => array(),
        );
      }
      $links['ls' . $fanciblock] = array(
        'title' => 'Re-order',
        'href' => 'admin/structure/fanciblocks/' . $fanciblock,
        'localized_options' => array(),
      );
    }
  unset($links['fanciblock-']);
  }
}

/**
 * Implements hook_theme().
 */
function fanciblock_theme() {
  return array(
    'fanciblock_admin_overview' => array(
      'file' => 'fanciblock.admin.inc',
      'variables' => array('title' => NULL, 'name' => NULL),
    ),
    'fanciblock_box_overview_form' => array(
      'file' => 'fanciblock.box.admin.inc',
      'render element' => 'form',
    ),
    'fanciblock_fontawesome_icon_build' => array(
      'file' => 'fanciblock.box.admin.inc',
      'variables' => array('class' => NULL, 'size' => NULL, 'style' => NULL, 'looks' => NULL, 'color' => NULL),
    ),
    'fanciblock_horizontal' => array(
      'variables' => array('fanciblock_data' => NULL, 'settings' => NULL, 'preview' => FALSE),
      'template' => 'theme/fanciblock-horizontal',
      'preprocess functions' => array('template_preprocess_fanciblock_content'),
      'file' => 'theme/fanciblock.theme.inc',
    ),
    'fanciblock_vertical' => array(
      'variables' => array('fanciblock_data' => NULL, 'settings' => NULL, 'preview' => FALSE),
      'template' => 'theme/fanciblock-vertical',
      'preprocess functions' => array('template_preprocess_fanciblock_content'),
      'file' => 'theme/fanciblock.theme.inc',
    ),
  );
}


/**
 * Title callback for the fanciblock overview page.
 */
function fanciblock_overview_title($fanciblock) {
  return $fanciblock['title'];
}

/**
 * Save a fanciblock box.
 *
 * @param $box
 *   An array representing a fanciblock box:
 *   - boxid: The unique id of the box
 *   - fanciblock_name: The parent fanciblock name.
 *   - box_title: The human readable box title.
 *   - weight: The box order value.
 *   - fontawesome_icon: The font awesome icon.
 *   - box_content: The box content.
 */
function fanciblock_box_save($settings) {
  config_set('fanciblock.settings', $settings['settings']['fanciblock_name'], $settings);
}

/**
 * Create a fanciblock box with default values.
 */
function _fanciblock_add_default_boxes($number, $default_box, $delta) {  
  $boxes = array();
  $title = $default_box['box_title'];
  $i = 1;
  while($i <= $number) {
    $id = uniqid();
    // Set the box title.
    $default_box['boxid'] = $i . $id;
    $default_box['box_title'] = $title . ' ' . $i;
    $default_box['fanciblock_type'] = (string) $delta;
    $boxes[$i . $id] = $default_box;
    $i++;
  }
  return $boxes;
}

/**
 * Implements hook_block_info().
 */
function fanciblock_block_info() {
  $blocks = array();
  
  $fanciblocks = fanciblock_load_all();
  foreach ($fanciblocks as $fanciblock) {
    $fanciblock_name = $fanciblock['settings']['fanciblock_name'];
    $fanciblock_title = $fanciblock['settings']['fanciblock_title'];
    $fanciblock_type = $fanciblock['settings']['fanciblock_type'];

    $blocks[$fanciblock_name]['info'] = t('Fanciblock: ') . $fanciblock_title;
    $blocks[$fanciblock_name]['description'] = t('Fanciblock ') . $fanciblock_type;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fanciblock_block_view($delta = '', $settings = array(), $contexts = array()) {
  $fanciblocks = fanciblock_load_all();
  if ($delta == 'fanciblock' || $delta == 'fanciicon' || array_key_exists($delta, $fanciblocks)) {
    if (isset($settings['fanciblock_name'])) {
      $fanciblock = fanciblock_get_settings($settings['fanciblock_name']);
    }
    else {
      $fanciblock = $fanciblocks[$delta];
    }

    // Block settings stay in Layout even if the module is unintalled, and cause
    // white-screen on view. So dont show anything unless we find a config file.
    if ($fanciblock) {
      $data['subject'] = NULL;
      // THis adds the a fake link in the fanciblock menu so that we can identify it.
      // See hook_menu for details.
      $data['content'] =  array(
        '#markup' => fanciblock_build_fanciblocks($delta, $fanciblock['settings']),
        '#contextual_links' => array(
          'fanciblock' => array('fanciblock/stub', array($delta)),
        ),
      );
      return $data;
    }
  }
}

/**
 * Preview a Fanciblock.
 */
function fanciblock_preview($fanciblock) {
  return fanciblock_block_view($fanciblock['settings']['fanciblock_name'], $fanciblock['settings']);
}

/**
 * Build a fanciblock and all contained boxes and load necessary CSS and JS.
 *
 * @return
 *   Array of fanciblocks with contained boxes data.
 */
function fanciblock_build_fanciblocks($delta, $settings) {
  // Load the config file.
  $fanciblock = fanciblock_get_settings($settings['fanciblock_name']);
  $boxes = $fanciblock['boxes'];
  backdrop_sort($boxes, array('weight' => SORT_NUMERIC));
  
  backdrop_add_css(backdrop_get_path('module', 'fanciblock') . '/fontawesome/css/font-awesome.css'); // add library fontawesome.css
  backdrop_add_css(backdrop_get_path('module', 'fanciblock') . '/css/fanciblock.css'); // add css
  backdrop_add_js(backdrop_get_path('module', 'fanciblock') . '/js/fanciblock.js'); // add js
  
  $settings = _flatten_fanciblock_settings($settings);
  $settings['delta'] = $delta;
  if ($settings['icon-position'] == 'right' || $settings['icon-position'] == 'left') {
    return theme('fanciblock_horizontal', array('fanciblock_data' => $boxes, 'settings' => $settings, 'preview' => FALSE));
  }
  elseif ($settings['icon-position'] == 'top' || $settings['icon-position'] == 'boxcut') {
    return theme('fanciblock_vertical', array('fanciblock_data' => $boxes, 'settings' => $settings, 'preview' => FALSE));
  }
}


/**
 * Flattens the settings array to remove parent keys.
 */
function _flatten_fanciblock_settings ($settings = array()) {
  $results = &backdrop_static('fanciblock_flatten', array());
  foreach ($settings as $key => $setting) {
    if (is_array($setting)) {
      _flatten_fanciblock_settings ($setting);
    }
    else {
      $results[$key] = $setting;
    }
  }
  return $results;
}

/**
 * Validate a form element that should have an integer value.
 */
function _fanciblock_validate_positive_integer($element, &$form_state) {
  $value = $element['#value'];
  if (!is_numeric($value) || intval($value) != $value || $value < 0) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}

/**
 * Validate a form element that should have an valid color value.
 */
function _fanciblock_validate_color_value($element, &$form_state) {
  $value = $element['#value'];
  // Only accept hexadecimal CSS color strings.
  if (!preg_match('/^#([a-f0-9]{3}){1,2}$/iD', $value) && $value != 'transparent') {
    form_error($element, t('%name must be a valid hexadecimal CSS color value.', array('%name' => $element['#title'])));
  }
}

/**
 * Load all fanciblock data.
 *
 * @return
 *   Array of fanciblock data.
 */
function fanciblock_get_settings($fanciblock_name) {
  return config_get('fanciblock.settings', $fanciblock_name);
}

